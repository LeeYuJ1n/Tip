#include "Loader.h" // "로더"를 로딩해서 헤더, 클래스 등록

int main()
{
    // 오늘의 복습 주제 : 클래스'들'
    
    // -> 어떻게 하나의 대상을 클래스의 조합으로 나타낼 것인가

    // 1. 클래스 : 객체의 구성요소, 객체의 설계도, 정보(변수로 대변되는 데이터, 함수로 대변되는 행동)의 집합

    // -> C++에서는 헤더에서 선언하고, 틀을 잡고, CPP에서 정의하는 것들

    // 클래스로 "학생"을 만들어서, 인스턴스로 생성, 할당하고 사용하기
    // -> 이 과정을 통틀어서 "객체를 사용한다"고 한다

    Student* student1 = new Student();
    // Student라는 클래스를 사용해서, student1이라는 이름의 인스턴스(실제 데이터) 생성
    // 그리고 포인터를 통해서 위치를 지정하도록 하고, 해당 데이터는 직접 만들어서 할당 (수동 할당)

    // 위 인스턴스는 기본 생성자로 만들어서 별도의 데이터가 없다 (기본에서 지정한 대로 나온다)

    student1->IntroduceMe(); // <- 처음 만들어진 대로 소개

    // 이어서 매개변수가 있는 생성자 쓰기

    Student* student2 = new Student("이재훈", "서울게임학원", 40, 0);

    student2->IntroduceMe(); // 매개변수를 받아서 적용된 데이터대로 소개

    // 이런 방식으로 교사, 의사, 요리사 등을 클래스로 만든다면... -> 각각 클래스로 만들어서 표현

    system("cls"); // 화면 초기화

    // -------------------------------------------------------------

    // 하나의 클래스가 반드시 해당 대상의 모든 것을 가지고 있어야 하는 건 아니다
    // 한 대상이 반드시 하나의 클래스로만 정의될 수 있는 것도 아니다

    // 예 : 학생은 "배우는 사람"인 동시에, "인간"이기도 하다
    //      그리고 보통은 "청년"이기도 하다
    //      또 학생은 배우는 행동, 소속된 기관에 다니는 행동 등도 내부에 갖고 있을 텐데
    //      해당 행동 역시 클래스로 만들지 말라는 법은 없다!

    // 그러면... 하나의 대상을 프로그래머가 코드로 표현할 때,

    // * 어느 부분이 바탕, 어느 부분이 공통, 어느 부분이 자기 데이터이고,
    //   어느 부분이 새로운 클래스로 표현되어야 하는가??? *

    // -> 사실... 이 질문에는 정답이 없습니다

    // 이 질문에 대답을 하는 과정이 바로 클래스 설계입니다만 : 클래스 설계는 공식화된 정답이 없습니다
    // 클래스 설계는 철저히 본인 개성입니다. 동시에 자기 센스 문제이기도 합니다

    // 다만, 이 클래스 설계를 할 때, 우리가 참고할 만한 몇 가지 팁은 있습니다
    // 해답 팁을 이용해서, 각자 자신의 클래스 설계를 해보면 됩니다

    // -----------------------------------------------------------------

    // 클래스 설게의 팁 1. "그림을 활용합시다"

    // 그림판, 파워포인트, 실물 그림... 무엇이든 좋습니다
    // 그림을 자유롭게 그려 가면서, 표현이 필요한 대상과 그 대상이 가진 정보의 관계를
    // 그려서 시각적으로 확인해보도록 합시다

    // 클래스 설계의 팁 2. "모든 것이 한 클래스일 필요가 없습니다"
    // 그림으로 그린 설계도에서 정보가 만약 대상보다 너무 크거나, 너무 작거나,
    // 세부 정보가 본래의 대상과 동 떨어졌다고 생각된다면
    // 그 땐 그걸 그냥 다른 클래스로 만들어도 됩니다
    // 그리고 해당 클래스를 상속받거나, 상속 시켜주거나, 혹은 
    // 그냥 다른 클래스로 만든 것을 멤버 변수로 가져오면 됩니다

    // 최종 판단은 결국 프로그래머의 재량입니다만, 어쨌든 그림을 먼저 그려보고
    // 자기가 표현하려는 대상을 충분히 그림 안에서 관계도로 만들어보고 나면
    // 이런 계층의 형태를 좀 더 직관적으로, 좀 더 자기에 맞게, 좀 더 체계적으로
    // 만들어볼 수 있게 됩니다

    // 참고자료 PPT 기준, 2번 7번 슬라이드를 기준으로
    // (상속받을 상위 클래스가 있고, 같은 장면에 등장하는 배경이 있는 것으로)
    // "학생"을 표현

    // 시험 삼아 현재 만든 학생 클래스 만들고 출력하기
    
    StudentClass* sc = new StudentClass();

    sc->IntroduceMyBody(); // 인간 클래스에서 상속 받은 "내 신체 소개"
    // sc->Daninda(); // 학생 클래스가 가진 "다니기" 함수 실행
    sc->daninda->Act(); // 학생 클래스가 가진 "다니기" 클래스의 행동 실행

    sc->daninda->myCourse = "서울게임학원";
    sc->daninda->Act();

    // 벡터에서 만든 "행동"도 실행
    ((Daninda*)sc->actions[0])->myCourse = "서울게임학원 프로그래밍반"; // Action*를 Daninda*로 형변환
    sc->actions[0]->Act();

    // 이 학생은 학생이지만 인긴이기도 하며 (인간을 상속받음)
    // 인간으로서 신체 부위를 가지고 있고 (인간 속에 멤버 변수 있음)
    // 각 신체 부위는 서로 연결되어 (객체끼리 서로를 멤버로 포함함)
    // 가장 중요한 신체 부위부터 다른 신체 부위를 찾아갈 수도 있습니다

    system("cls"); // 화면 다시 모두 지우기

    // ---------------------------------------------------------------

    // 학생과 학원이 모두 있는 "서울" 클래스를 객체로 만들어서 쓰기

    Seoul* seoul = new Seoul(); // 생성자 호출 시점에서 Start()까지 실행될 것이므로 별도 함수 불필요

    delete student1;
    delete student2;
    delete sc;
    delete seoul;
}